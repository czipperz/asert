echo '// Asert symbols for xkb on X.Org Server 7.x'
echo '// 2015-05-25 Czipperz, http://github.com/czipperz/asert'
echo ''
echo 'partial alphanumeric_keys'
echo 'xkb_symbols "asert" {'
echo '	include "us"'
echo '	name[Group1]= "English (Asert)";'
echo ''
echo '	key <TLDE> { [        grave,   asciitilde,      dead_tilde,       asciitilde ] };'
echo '	key <AE01> { [            1,       exclam,      exclamdown,      onesuperior ] };'
echo '	key <AE02> { [            2,           at,       masculine,      twosuperior ] };'
echo '	key <AE03> { [            3,   numbersign,     ordfeminine,    threesuperior ] };'
echo '	key <AE04> { [            4,       dollar,            cent,         sterling ] };'
echo '	key <AE05> { [            5,      percent,        EuroSign,              yen ] };'
echo '	key <AE06> { [            6,  asciicircum,         hstroke,          Hstroke ] };'
echo '	key <AE07> { [            7,    ampersand,             eth,              ETH ] };'
echo '	key <AE08> { [            8,     asterisk,           thorn,            THORN ] };'
echo '	key <AE09> { [            9,    parenleft,  leftsinglequotemark,  leftdoublequotemark ] };'
echo '	key <AE10> { [            0,   parenright, rightsinglequotemark,  rightdoublequotemark ] };'
echo '	key <AE11> { [        minus,   underscore,          endash,           emdash ] };'
echo '	key <AE12> { [        equal,         plus,        multiply,         division ] };'
echo ''
echo '	key <AD01> { [            q,            Q,      adiaeresis,       Adiaeresis ] };'
echo '	key <AD02> { [            w,            W,           aring,            Aring ] };'
echo '	key <AD03> { [            d,            D,  dead_diaeresis,       asciitilde ] };'
echo '	key <AD04> { [            f,            F,          atilde,           Atilde ] };'
echo '	key <AD05> { [            g,            G,     dead_ogonek,       asciitilde ] };'
echo '	key <AD06> { [            h,            H,      dead_caron,       asciitilde ] };'
echo '	key <AD07> { [            m,            M,     dead_macron,       asciitilde ] };'
echo '	key <AD08> { [            k,            K,  dead_abovering,       asciitilde ] };'
echo '	key <AD09> { [            l,            L,         lstroke,          Lstroke ] };'
echo '	key <AD10> { [            p,            P,          oslash,         Ooblique ] };'
echo '	key <AD11> { [  bracketleft,    braceleft,   guillemotleft,        0x1002039 ] };'
echo '	key <AD12> { [ bracketright,   braceright,  guillemotright,        0x100203a ] };'
echo '	key <BKSL> { [    backslash,          bar,      asciitilde,       asciitilde ] };'
echo ''
echo '	key <AC01> { [            a,            A,          aacute,           Aacute ] };'
echo '	key <AC02> { [            s,            S,          ssharp,       asciitilde ] };'
echo '	key <AC03> { [            e,            E,          eacute,           Eacute ] };'
echo '	key <AC04> { [            r,            R,      dead_grave,       asciitilde ] };'
echo '	key <AC05> { [            t,            T,      dead_acute, dead_doubleacute ] };'
echo '	key <AC06> { [            n,            N,          ntilde,           Ntilde ] };'
echo '	key <AC07> { [            u,            U,          uacute,           Uacute ] };'
echo '	key <AC08> { [            i,            I,          iacute,           Iacute ] };'
echo '	key <AC09> { [            o,            O,          oacute,           Oacute ] };'
echo '	key <AC10> { [    semicolon,        colon,      odiaeresis,       Odiaeresis ] };'
echo '	key <AC1l> { [   apostrophe,     quotedbl,          otilde,           Otilde ] };'
echo ''
echo '	key <AB01> { [            z,            Z,              ae,               AE ] };'
echo '	key <AB02> { [            x,            X, dead_circumflex,       asciitilde ] };'
echo '	key <AB03> { [            c,            C,        ccedilla,         Ccedilla ] };'
echo '	key <AB04> { [            v,            V,              oe,               OE ] };'
echo '	key <AB05> { [            b,            B,      dead_breve,       asciitilde ] };'
echo '	key <AB06> { [            y,            Y,      udiaeresis,       Udiaeresis ] };'
echo '	key <AB07> { [            j,            J,         dstroke,          Dstroke ] };'
echo '	key <AB08> { [        comma,         less,    dead_cedilla,       asciitilde ] };'
echo '	key <AB09> { [       period,      greater,   dead_abovedot,       asciitilde ] };'
echo '	key <AB10> { [        slash,     question,    questiondown,       asciitilde ] };'
echo ''
echo '	key <AF00> { [    BackSpace,    BackSpace,       BackSpace,        BackSpace ] };'
echo '	key <CAPS> { [       Escape,       Escape,          Escape,           Escape ] };'
echo '	key <LSGT> { [        minus,   underscore,          endash,           emdash ] };'
echo '	key <SPCE> { [        space,        space,           space,     nobreakspace ] };'
echo ''
echo '	include "level3(ralt_switch)"'
echo '};'
echo ''
echo 'partial alphanumeric_keys'
echo 'xkb_symbols "asert-swap" {'
echo '	include "us"'
echo '	name[Group1]= "English (Asert Swap)";'
echo ''
echo '	key <TLDE> { [        grave,   asciitilde,      dead_tilde,       asciitilde ] };'
echo '	key <AE01> { [            1,       exclam,      exclamdown,      onesuperior ] };'
echo '	key <AE02> { [            2,           at,       masculine,      twosuperior ] };'
echo '	key <AE03> { [            3,   numbersign,     ordfeminine,    threesuperior ] };'
echo '	key <AE04> { [            4,       dollar,            cent,         sterling ] };'
echo '	key <AE05> { [            5,      percent,        EuroSign,              yen ] };'
echo '	key <AE06> { [            6,  asciicircum,         hstroke,          Hstroke ] };'
echo '	key <AE07> { [            7,    ampersand,             eth,              ETH ] };'
echo '	key <AE08> { [            8,     asterisk,           thorn,            THORN ] };'
echo '	key <AE09> { [            9,    parenleft,  leftsinglequotemark,  leftdoublequotemark ] };'
echo '	key <AE10> { [            0,   parenright, rightsinglequotemark,  rightdoublequotemark ] };'
echo '	key <AE11> { [        minus,   underscore,          endash,           emdash ] };'
echo '	key <AE12> { [        equal,         plus,        multiply,         division ] };'
echo ''
echo '	key <AD01> { [            q,            Q,      adiaeresis,       Adiaeresis ] };'
echo '	key <AD02> { [            w,            W,           aring,            Aring ] };'
echo '	key <AD03> { [            d,            D,  dead_diaeresis,       asciitilde ] };'
echo '	key <AD04> { [            f,            F,          atilde,           Atilde ] };'
echo '	key <AD05> { [            g,            G,     dead_ogonek,       asciitilde ] };'
echo '	key <AD06> { [            h,            H,      dead_caron,       asciitilde ] };'
echo '	key <AD07> { [            j,            J,         dstroke,          Dstroke ] };'
echo '	key <AD08> { [            k,            K,  dead_abovering,       asciitilde ] };'
echo '	key <AD09> { [            l,            L,         lstroke,          Lstroke ] };'
echo '	key <AD10> { [            p,            P,          oslash,         Ooblique ] };'
echo '	key <AD11> { [  bracketleft,    braceleft,   guillemotleft,        0x1002039 ] };'
echo '	key <AD12> { [ bracketright,   braceright,  guillemotright,        0x100203a ] };'
echo '	key <BKSL> { [    backslash,          bar,      asciitilde,       asciitilde ] };'
echo ''
echo '	key <AC01> { [            a,            A,          aacute,           Aacute ] };'
echo '	key <AC02> { [            s,            S,          ssharp,       asciitilde ] };'
echo '	key <AC03> { [            e,            E,          eacute,           Eacute ] };'
echo '	key <AC04> { [            r,            R,      dead_grave,       asciitilde ] };'
echo '	key <AC05> { [            t,            T,      dead_acute, dead_doubleacute ] };'
echo '	key <AC06> { [            y,            Y,      udiaeresis,       Udiaeresis ] };'
echo '	key <AC07> { [            u,            U,          uacute,           Uacute ] };'
echo '	key <AC08> { [            i,            I,          iacute,           Iacute ] };'
echo '	key <AC09> { [            o,            O,          oacute,           Oacute ] };'
echo '	key <AC10> { [    semicolon,        colon,      odiaeresis,       Odiaeresis ] };'
echo '	key <AC1l> { [   apostrophe,     quotedbl,          otilde,           Otilde ] };'
echo ''
echo '	key <AB01> { [            z,            Z,              ae,               AE ] };'
echo '	key <AB02> { [            x,            X, dead_circumflex,       asciitilde ] };'
echo '	key <AB03> { [            c,            C,        ccedilla,         Ccedilla ] };'
echo '	key <AB04> { [            v,            V,              oe,               OE ] };'
echo '	key <AB05> { [            b,            B,      dead_breve,       asciitilde ] };'
echo '	key <AB06> { [            n,            N,          ntilde,           Ntilde ] };'
echo '	key <AB07> { [            m,            M,     dead_macron,       asciitilde ] };'
echo '	key <AB08> { [        comma,         less,    dead_cedilla,       asciitilde ] };'
echo '	key <AB09> { [       period,      greater,   dead_abovedot,       asciitilde ] };'
echo '	key <AB10> { [        slash,     question,    questiondown,       asciitilde ] };'
echo ''
echo '	key <AF00> { [    BackSpace,    BackSpace,       BackSpace,        BackSpace ] };'
echo '	key <CAPS> { [       Escape,       Escape,          Escape,           Escape ] };'
echo '	key <LSGT> { [        minus,   underscore,          endash,           emdash ] };'
echo '	key <SPCE> { [        space,        space,           space,     nobreakspace ] };'
echo ''
echo '	include "level3(ralt_switch)"'
echo '};'
echo ''
echo 'partial alphanumeric_keys'
echo 'xkb_symbols "asert-pure" {'
echo '	include "us"'
echo '	name[Group1]= "English (Asert Pure)";'
echo ''
echo '	key <TLDE> { [        grave,   asciitilde,      dead_tilde,       asciitilde ] };'
echo '	key <AE01> { [            1,       exclam,      exclamdown,      onesuperior ] };'
echo '	key <AE02> { [            2,           at,       masculine,      twosuperior ] };'
echo '	key <AE03> { [            3,   numbersign,     ordfeminine,    threesuperior ] };'
echo '	key <AE04> { [            4,       dollar,            cent,         sterling ] };'
echo '	key <AE05> { [            5,      percent,        EuroSign,              yen ] };'
echo '	key <AE06> { [            6,  asciicircum,         hstroke,          Hstroke ] };'
echo '	key <AE07> { [            7,    ampersand,             eth,              ETH ] };'
echo '	key <AE08> { [            8,     asterisk,           thorn,            THORN ] };'
echo '	key <AE09> { [            9,    parenleft,  leftsinglequotemark,  leftdoublequotemark ] };'
echo '	key <AE10> { [            0,   parenright, rightsinglequotemark,  rightdoublequotemark ] };'
echo '	key <AE11> { [        minus,   underscore,          endash,           emdash ] };'
echo '	key <AE12> { [        equal,         plus,        multiply,         division ] };'
echo ''
echo '	key <AD01> { [            a,            A,          aacute,           Aacute ] };'
echo '	key <AD02> { [            s,            S,          ssharp,       asciitilde ] };'
echo '	key <AD03> { [            d,            D,  dead_diaeresis,       asciitilde ] };'
echo '	key <AD04> { [            f,            F,          atilde,           Atilde ] };'
echo '	key <AD05> { [            g,            G,     dead_ogonek,       asciitilde ] };'
echo '	key <AD06> { [            h,            H,      dead_caron,       asciitilde ] };'
echo '	key <AD07> { [            j,            J,         dstroke,          Dstroke ] };'
echo '	key <AD08> { [            k,            K,  dead_abovering,       asciitilde ] };'
echo '	key <AD09> { [            l,            L,         lstroke,          Lstroke ] };'
echo '	key <AD10> { [    semicolon,        colon,      odiaeresis,       Odiaeresis ] };'
echo '	key <AD11> { [  bracketleft,    braceleft,   guillemotleft,        0x1002039 ] };'
echo '	key <AD12> { [ bracketright,   braceright,  guillemotright,        0x100203a ] };'
echo '	key <BKSL> { [    backslash,          bar,      asciitilde,       asciitilde ] };'
echo ''
echo '	key <AC01> { [            q,            Q,      adiaeresis,       Adiaeresis ] };'
echo '	key <AC02> { [            w,            W,           aring,            Aring ] };'
echo '	key <AC03> { [            e,            E,          eacute,           Eacute ] };'
echo '	key <AC04> { [            r,            R,      dead_grave,       asciitilde ] };'
echo '	key <AC05> { [            t,            T,      dead_acute, dead_doubleacute ] };'
echo '	key <AC06> { [            y,            Y,      udiaeresis,       Udiaeresis ] };'
echo '	key <AC07> { [            u,            U,          uacute,           Uacute ] };'
echo '	key <AC08> { [            i,            I,          iacute,           Iacute ] };'
echo '	key <AC09> { [            o,            O,          oacute,           Oacute ] };'
echo '	key <AC10> { [            p,            P,          oslash,         Ooblique ] };'
echo '	key <AC1l> { [   apostrophe,     quotedbl,          otilde,           Otilde ] };'
echo ''
echo '	key <AB01> { [            z,            Z,              ae,               AE ] };'
echo '	key <AB02> { [            x,            X, dead_circumflex,       asciitilde ] };'
echo '	key <AB03> { [            c,            C,        ccedilla,         Ccedilla ] };'
echo '	key <AB04> { [            v,            V,              oe,               OE ] };'
echo '	key <AB05> { [            b,            B,      dead_breve,       asciitilde ] };'
echo '	key <AB06> { [            n,            N,          ntilde,           Ntilde ] };'
echo '	key <AB07> { [            m,            M,     dead_macron,       asciitilde ] };'
echo '	key <AB08> { [        comma,         less,    dead_cedilla,       asciitilde ] };'
echo '	key <AB09> { [       period,      greater,   dead_abovedot,       asciitilde ] };'
echo '	key <AB10> { [        slash,     question,    questiondown,       asciitilde ] };'
echo ''
echo '	key <AF00> { [    BackSpace,    BackSpace,       BackSpace,        BackSpace ] };'
echo '	key <CAPS> { [       Escape,       Escape,          Escape,           Escape ] };'
echo '	key <LSGT> { [        minus,   underscore,          endash,           emdash ] };'
echo '	key <SPCE> { [        space,        space,           space,     nobreakspace ] };'
echo ''
echo '	include "level3(ralt_switch)"'
echo '};'
